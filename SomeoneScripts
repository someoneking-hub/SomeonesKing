--//UNIVERSAIS 
if game.PlaceId == 2753915549 then
    World1 = true
elseif game.PlaceId == 4442272183 then
    World2 = true
elseif game.PlaceId == 7449423635 then
    World3 = true
else
    game:GetService("Players").LocalPlayer:Kick("Do not Support, Please wait...")
end

--Close UI
local ScreenGui = Instance.new("ScreenGui")
local ImageButton = Instance.new("ImageButton")
local UICorner = Instance.new("UICorner")

ScreenGui.Parent = game.CoreGui
ScreenGui.ZIndexBehavior = Enum.ZIndexBehavior.Sibling

ImageButton.Parent = ScreenGui
ImageButton.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
ImageButton.BorderSizePixel = 0
ImageButton.Position = UDim2.new(0.120833337, 0, 0.0952890813, 0)
ImageButton.Size = UDim2.new(0, 55, 0, 55)
ImageButton.Draggable = true
ImageButton.Image = "rbxassetid://127950462202673"  -- Substitua pelo ID do asset desejado

UICorner.Parent = ImageButton  -- Adiciona cantos arredondados ao botão

-- Ação de clicar no botão
ImageButton.MouseButton1Down:Connect(function()
    game:GetService("VirtualInputManager"):SendKeyEvent(true, Enum.KeyCode.LeftControl, false, game)  -- Ação personalizada quando o botão é clicado
end)


local Fluent = loadstring(game:HttpGet("https://raw.githubusercontent.com/discoart/FluentPlus/refs/heads/main/Beta.lua"))()
local SaveManager = loadstring(game:HttpGet("https://raw.githubusercontent.com/dawid-scripts/Fluent/master/Addons/SaveManager.lua"))()
local InterfaceManager = loadstring(game:HttpGet("https://raw.githubusercontent.com/dawid-scripts/Fluent/master/Addons/InterfaceManager.lua"))()

local Window = Fluent:CreateWindow({
    Title = "Fluent " .. Fluent.Version,
    SubTitle = "by dawid",
    TabWidth = 160,
    Size = UDim2.fromOffset(580, 460),
    Acrylic = true, -- The blur may be detectable, setting this to false disables blur entirely
    Theme = "Light",
    MinimizeKey = Enum.KeyCode.LeftControl -- Used when theres no MinimizeKeybind
})

--Fluent provides Lucide Icons https://lucide.dev/icons/ for the tabs, icons are optional
local Tabs = {
    Infor = Window:AddTab({Title = "Informações", Icon = "rbxassetid://127950462202673"}),
		Farm = Window:AddTab({ Title = "Principal", Icon = "rbxassetid://127950462202673" }),
		   Quest = Window:AddTab({Title = "Quest & Item", Icon = "rbxassetid://127950462202673"}),
		   if World2 or World3 then
	 SeaEvent = Window:AddTab({Title = "Eventos Marítimos", Icon = "rbxassetid://127950462202673"}),
	Island = Window:AddTab({Title = "Ilhas", Icon = "rbxassetid://127950462202673"});
else
	Fruit = Window:AddTab({Title = "Frutas & Raid", Icon = "rbxassetid://127950462202673"}),
		 Teleport = Window:AddTab({Title = "Teleporte", Icon = "rbxassetid://127950462202673"}),
	Stats = Window:AddTab({Title = "Stats", Icon = "rbxassetid://127950462202673"}),	
if World2 or World3 then
Race = Window:AddTab({Title = "Raça", Icon = "rbxassetid://127950462202673"}),
else
Visual = Window:AddTab({Title = "Visual", Icon = "rbxassetid://127950462202673"}),	
Settings = Window:AddTab({ Title = "Settings", Icon = "rbxassetid://127950462202673" })
end
end}

local Options = Fluent.Options

do
    





























end
-- Addons:
-- SaveManager (Allows you to have a configuration system)
-- InterfaceManager (Allows you to have a interface managment system)

-- Hand the library over to our managers
SaveManager:SetLibrary(Fluent)
InterfaceManager:SetLibrary(Fluent)

-- Ignore keys that are used by ThemeManager.
-- (we dont want configs to save themes, do we?)
SaveManager:IgnoreThemeSettings()

-- You can add indexes of elements the save manager should ignore
SaveManager:SetIgnoreIndexes({})

-- use case for doing it this way:
-- a script hub could have themes in a global folder
-- and game configs in a separate folder per game
InterfaceManager:SetFolder("FluentScriptHub")
SaveManager:SetFolder("FluentScriptHub/specific-game")

InterfaceManager:BuildInterfaceSection(Tabs.Settings)
SaveManager:BuildConfigSection(Tabs.Settings)


Window:SelectTab(1)

Fluent:Notify({
    Title = "Fluent",
    Content = "The script has been loaded.",
    Duration = 8
})

-- You can use the SaveManager:LoadAutoloadConfig() to load a config
-- which has been marked to be one that auto loads!
SaveManager:LoadAutoloadConfig()




